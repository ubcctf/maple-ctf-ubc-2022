import networkx as nx
import numpy as np

maze = np.array([ 0x09, 0x14, 0x01, 0x10, 0x09, 0x05, 0x01, 0x01, 0x13, 0x01, 0x03, 0x01, 0x03, 0x12, 0x0b, 0x07, 0x0b, 0x0e, 0x16, 0x12, 0x02, 0x10, 0x03, 0x12, 0x12, 0x08, 0x0c, 0x0c, 0x1c, 0x14, 0x03, 0x10, 0x18, 0x0c, 0x0c, 0x14, 0x10, 0x09, 0x0e, 0x15, 0x11, 0x10, 0x08, 0x0c, 0x0c, 0x07, 0x11, 0x12, 0x02, 0x10, 0x10, 0x08, 0x15, 0x02, 0x0a, 0x05, 0x10, 0x08, 0x14, 0x10, 0x02, 0x08, 0x14, 0x02, 0x11, 0x30, 0x01, 0x28, 0x0c, 0x05, 0x08, 0x15, 0x2a, 0x14, 0x12, 0x01, 0x01, 0x2a, 0x15, 0x13, 0x08, 0x15, 0x39, 0x26, 0x0a, 0x25, 0x1b, 0x26, 0x20, 0x0a, 0x17, 0x01, 0x30, 0x2b, 0x0f, 0x24, 0x20, 0x08, 0x1f, 0x2f, 0x2c, 0x17, 0x03, 0x30, 0x21, 0x28, 0x06, 0x02, 0x08, 0x06, 0x33, 0x20, 0x0a, 0x35, 0x28, 0x05, 0x28, 0x0c, 0x0f, 0x04, 0x28, 0x06, 0x28, 0x2e, 0x1c, 0x04, 0x3a, 0x04, 0x20, 0x20, 0x19, 0x05, 0x08, 0x1c, 0x05, 0x30, 0x11, 0x20, 0x32, 0x02, 0x08, 0x05, 0x32, 0x20, 0x0b, 0x24, 0x38, 0x04, 0x01, 0x0a, 0x2d, 0x04, 0x02, 0x19, 0x34, 0x01, 0x32, 0x11, 0x1a, 0x04, 0x08, 0x06, 0x29, 0x1e, 0x04, 0x22, 0x08, 0x24, 0x10, 0x09, 0x1e, 0x14, 0x08, 0x0d, 0x3c, 0x05, 0x19, 0x37, 0x08, 0x0c, 0x0c, 0x06, 0x11, 0x12, 0x02, 0x02, 0x08, 0x0c, 0x2c, 0x1c, 0x3e, 0x14, 0x10, 0x10, 0x20, 0x08, 0x1d, 0x25, 0x01, 0x21, 0x31, 0x08, 0x25, 0x10, 0x02, 0x02, 0x33, 0x03, 0x13, 0x08, 0x3e, 0x14, 0x10, 0x10, 0x12, 0x02, 0x02, 0x20, 0x29, 0x04, 0x21, 0x30, 0x28, 0x04, 0x18, 0x0c, 0x16, 0x20, 0x02, 0x09, 0x1c, 0x04, 0x28, 0x0c, 0x34, 0x30, 0x18, 0x1e, 0x2c, 0x04, 0x20, 0x38, 0x05, 0x01, 0x01, 0x01, 0x20, 0x30, 0x10, 0x08, 0x0e, 0x16, 0x1a, 0x36, 0x30, 0x20, 0x21, 0x28, 0x0d, 0x04, 0x20, 0x18, 0x0d, 0x04, 0x22, 0x08, 0x07, 0x21, 0x11, 0x18, 0x36, 0x01, 0x20, 0x08, 0x37, 0x2a, 0x3f, 0x24, 0x28, 0x07, 0x11, 0x01, 0x1a, 0x14, 0x02, 0x20, 0x11, 0x03, 0x22, 0x0a, 0x24, 0x08, 0x1c, 0x05, 0x33, 0x12, 0x10, 0x11, 0x21, 0x30, 0x30, 0x22, 0x1a, 0x04, 0x08, 0x27, 0x0a, 0x0c, 0x04, 0x08, 0x14, 0x21, 0x38, 0x06, 0x18, 0x24, 0x20, 0x30, 0x30, 0x02, 0x01, 0x19, 0x1c, 0x04, 0x10, 0x20, 0x19, 0x04, 0x12, 0x1b, 0x0c, 0x04, 0x20, 0x20, 0x2a, 0x04, 0x08, 0x0f, 0x3c, 0x14, 0x38, 0x04, 0x19, 0x14, 0x30, 0x02, 0x30, 0x30, 0x01, 0x10, 0x3a, 0x04, 0x08, 0x05, 0x01, 0x01, 0x3a, 0x14, 0x30, 0x20, 0x29, 0x3f, 0x07, 0x22, 0x30, 0x11, 0x28, 0x14, 0x12, 0x03, 0x0a, 0x05, 0x10, 0x1a, 0x35, 0x01, 0x20, 0x02, 0x20, 0x0a, 0x14, 0x20, 0x3a, 0x16, 0x09, 0x34, 0x21, 0x01, 0x29, 0x14, 0x20, 0x11, 0x22, 0x30, 0x02, 0x12, 0x1a, 0x0d, 0x1c, 0x16, 0x08, 0x0c, 0x24, 0x30, 0x20, 0x02, 0x30, 0x20, 0x30, 0x08, 0x35, 0x28, 0x1c, 0x34, 0x28, 0x04, 0x08, 0x0c, 0x06, 0x10, 0x20, 0x20, 0x20, 0x01, 0x10, 0x39, 0x1d, 0x04, 0x20, 0x38, 0x14, 0x33, 0x20, 0x13, 0x1a, 0x0c, 0x24, 0x20, 0x30, 0x02, 0x08, 0x16, 0x10, 0x08, 0x3c, 0x04, 0x30, 0x20, 0x01, 0x20, 0x08, 0x0d, 0x04, 0x20, 0x01, 0x20, 0x0b, 0x25, 0x08, 0x2f, 0x2c, 0x04, 0x22, 0x20, 0x02, 0x03, 0x01, 0x2b, 0x04, 0x08, 0x2d, 0x04, 0x20, 0x02, 0x22, 0x03, 0x21, 0x20, 0x0a, 0x04, 0x01, 0x01, 0x08, 0x26, 0x0a, 0x04, 0x01, 0x01, 0x2b, 0x26, 0x28, 0x0c, 0x04, 0x20, 0x22, 0x23, 0x02, 0x20, 0x29, 0x04, 0x08, 0x0c, 0x24, 0x03, 0x08, 0x24, 0x2a, 0x04, 0x28, 0x04, 0x20, 0x02 ])

newmaze = maze.reshape(8,8,8)

end = (7, 0, 7)
start = (7, 1, 0)
g = nx.Graph()

for z in range(len(newmaze)):
    for y in range(len(newmaze[0])):
        for x in range(len(newmaze[0][0])):
            walls = newmaze[z][y][x]
            if (walls & (1 << 0)) == (1 << 0):
                g.add_edge((x,y,z), (x,y+1,z))
            if (walls & (1 << 1)) == (1 << 1):
                g.add_edge((x,y,z), (x,y-1,z))
            if (walls & (1 << 2)) == (1 << 2):
                g.add_edge((x,y,z), (x-1,y,z))
            if (walls & (1 << 3)) == (1 << 3):
                g.add_edge((x,y,z), (x+1,y,z))
            if (walls & (1 << 4)) == (1 << 4):
                g.add_edge((x,y,z), (x,y,z+1))
            if (walls & (1 << 5)) == (1 << 5):
                g.add_edge((x,y,z), (x,y,z-1))

p = nx.shortest_path(g, start, end)
password = ""
for i in range(0, len(p)-1):
    cur = p[i]
    next = p[i+1]
    result = np.subtract(next, cur)
    if result[0] == -1:
        password += 'a'
    elif result[0] == 1:
        password += 'd'
    elif result[1] == -1:
        password += 'w'
    elif result[1] == 1:
        password += 's'
    elif result[2] == -1:
        password += 'e'
    elif result[2] == 1:
        password += 'q'
    else:
        print("ERROR")

print([x for x in nx.all_shortest_paths(g,start,end)], len(p))
print(nx.shortest_path_length(g, start, end))
print(password)
print(len(password) == nx.shortest_path_length(g, start, end))